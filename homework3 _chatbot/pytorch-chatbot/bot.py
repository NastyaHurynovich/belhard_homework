import logging
import os
import random
import json
import torch
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from nltk_utils import tokenize, stem
from model import LSTMModel


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.environ.get("TOKEN")

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise Exception("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

with open('intents.json', 'r', encoding='utf-8') as json_data:
    intents = json.load(json_data)


FILE = "data.pth"
data = torch.load(FILE, map_location=device)

input_size = data["input_size"]
hidden_size = data["hidden_size"]
output_size = data["output_size"]
all_words = data['all_words']
tags = data['tags']
model_state = data["model_state"]

ignore_words = ['?', '.', '!']

model = LSTMModel(input_size, hidden_size, output_size, num_layers=2).to(device)
model.load_state_dict(model_state)
model.eval()


class UserState(StatesGroup):
    transaction = State()
    support = State()


def get_response(msg: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: '{msg}'")

        words = tokenize(msg)
        words = [stem(w) for w in words if w not in ignore_words]
        bag = [1 if word in words else 0 for word in all_words]
        bag = torch.tensor(bag, dtype=torch.float32).to(device)

        output = model(bag.unsqueeze(0))
        _, predicted = torch.max(output, 1)
        tag = tags[predicted.item()]

        logger.info(f"–ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ —Ç–µ–≥: '{tag}'")

        for intent in intents['intents']:
            if tag == intent['tag']:
                response = random.choice(intent['responses'])
                logger.info(f"–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: '{response}'")
                return response

        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞: '{tag}'")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{msg}': {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@dp.message_handler(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    welcome_text = (
        "üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —á–∞—Ç-–±–æ—Ç!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ - /balance\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤ - /transfer\n"
        "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫–∞—Ä—Ç—ã - /block_card\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - /transactions\n"
        "‚Ä¢ –°–≤—è–∑—å—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π - /support\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é."
    )
    await message.reply(welcome_text)


@dp.message_handler(commands=['balance'])
async def check_balance(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    response = get_response("–±–∞–ª–∞–Ω—Å")
    await message.reply(response)


@dp.message_handler(Command("transfer"))
async def transfer_money(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    await UserState.transaction.set()
    await message.reply(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<—Å—É–º–º–∞> <–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 40702810500000012345\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )


@dp.message_handler(state=UserState.transaction)
async def process_transfer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        amount, account = message.text.split()
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        await message.reply(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. –Ω–∞ —Å—á–µ—Ç {account} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    finally:
        await state.finish()


@dp.message_handler(Command("block_card"))
async def block_card(message: types.Message):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã"""
    response = get_response("–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã")
    await message.reply(response)


@dp.message_handler(Command("transactions"))
async def show_transactions(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    response = get_response("–∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    await message.reply(response)


@dp.message_handler(Command("support"))
async def contact_support(message: types.Message):
    """–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await UserState.support.set()
    await message.reply(
        "üõü –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å!\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )


@dp.message_handler(state=UserState.support)
async def process_support(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await message.reply("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()


@dp.message_handler(Command("cancel"), state="*")
@dp.message_handler(Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    response = get_response(message.text)
    await message.reply(response)


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞...")
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
        raise
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")