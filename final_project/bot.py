import logging
import os
import torch
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from main import PoetTransformer, PoetDataset

from dotenv import load_dotenv

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot1.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.environ.get("TOKEN")
CHECKPOINT_PATH = "check/checkpoints/checkpoint_epoch_2.pt"
JSON_PATH = "classic_poems.json"


bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
model = None
dataset = None


class UserState:
    def __init__(self):
        self.temperature = 1.0
        self.max_len = 100
        self.author_id = 0


user_states = {}


def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    global model, dataset

    checkpoint = torch.load(CHECKPOINT_PATH)
    dataset = PoetDataset(JSON_PATH, max_length=32)

    model = PoetTransformer(
        vocab_size=checkpoint['vocab_size'],
        num_authors=checkpoint['num_authors'],
        d_model=128,
        nhead=4,
        num_layers=4
    ).to('cuda' if torch.cuda.is_available() else 'cpu')

    model.dataset = dataset
    model.load_state_dict(checkpoint['model_state'])
    model.eval()


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user_id = message.from_user.id
    user_states[user_id] = UserState()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    state = user_states[user_id]

    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∏—Ö–æ–≤!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞—á–∞–ª–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è, –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É –µ–≥–æ –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.\n\n"
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {state.temperature}\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {state.max_len} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Ä: {dataset.authors[state.author_id]}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(text)


@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞—á–∞–ª–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è, –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É –µ–≥–æ!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: \"–õ—É–Ω–∞ –Ω–∞–¥ —Ä–µ–∫–æ–π\""
    )
    await message.answer(help_text)


@dp.message(Command('settings'))
async def cmd_settings(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = UserState()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    state = user_states[user_id]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text=f"‚úèÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({state.temperature})",
            callback_data="set_temp"
        ),
        types.InlineKeyboardButton(
            text=f"üë®‚Äçüé® –ê–≤—Ç–æ—Ä ({dataset.authors[state.author_id]})",
            callback_data="set_author"
        ),
        types.InlineKeyboardButton(
            text=f"üìè –î–ª–∏–Ω–∞ ({state.max_len} —Å–∏–º–≤.)",
            callback_data="set_len"
        )
    )
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    settings_info = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        "1. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        "   ‚Ä¢ 0.1-0.5 - –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã\n"
        "   ‚Ä¢ 0.5-1.0 - –±–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏–∫–∏\n"
        "   ‚Ä¢ 1.0-2.0 - –±–æ–ª–µ–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        "2. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "3. –ê–≤—Ç–æ—Ä - —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—ç—Ç–∞"
    )

    await message.answer(
        text=settings_info,
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data == 'set_temp')
async def set_temperature(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="0.5 (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)",
            callback_data="temp_0.5"
        ),
        types.InlineKeyboardButton(
            text="1.0 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)",
            callback_data="temp_1.0"
        ),
        types.InlineKeyboardButton(
            text="1.5 (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ)",
            callback_data="temp_1.5"
        )
    )
    builder.adjust(2)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith('temp_'))
async def process_temperature(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    user_id = callback_query.from_user.id
    temp = float(callback_query.data.split('_')[1])
    user_states[user_id].temperature = temp

    await callback_query.message.edit_text(
        text=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {temp}"
    )


@dp.callback_query(lambda c: c.data == 'set_author')
async def set_author(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    for i, author in enumerate(dataset.authors):
        builder.add(types.InlineKeyboardButton(
            text=author,
            callback_data=f"author_{i}"
        ))
    builder.adjust(2)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith('author_'))
async def process_author(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞"""
    user_id = callback_query.from_user.id
    author_id = int(callback_query.data.split('_')[1])
    user_states[user_id].author_id = author_id

    await callback_query.message.edit_text(
        text=f"–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {dataset.authors[author_id]}"
    )


@dp.callback_query(lambda c: c.data == 'set_len')
async def set_length(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="50 —Å–∏–º–≤–æ–ª–æ–≤",
            callback_data="len_50"
        ),
        types.InlineKeyboardButton(
            text="100 —Å–∏–º–≤–æ–ª–æ–≤",
            callback_data="len_100"
        ),
        types.InlineKeyboardButton(
            text="150 —Å–∏–º–≤–æ–ª–æ–≤",
            callback_data="len_150"
        )
    )
    builder.adjust(2)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith('len_'))
async def process_length(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã"""
    user_id = callback_query.from_user.id
    length = int(callback_query.data.split('_')[1])
    user_states[user_id].max_len = length

    await callback_query.message.edit_text(
        text=f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length}"
    )


@dp.message()
async def generate_poem(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = UserState()

    state = user_states[user_id]

    try:
        msg = await message.answer("üñãÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ...")


        input_text = message.text.lower().strip()
        if not input_text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.")
            return

        try:
            generated_text = model.generate(
                start_text=input_text,
                author_id=state.author_id,
                max_len=state.max_len,
                temperature=state.temperature
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            await msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        result = (
            f"üé≠ –ê–≤—Ç–æ—Ä: {dataset.authors[state.author_id]}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {state.temperature}\n"
            f"üìè –î–ª–∏–Ω–∞: {state.max_len}\n\n"
            f"üìú –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{generated_text}"
        )

        await msg.edit_text(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    load_model()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


if __name__ == '__main__':
    import asyncio
    from aiogram import Dispatcher


    async def main():
        await on_startup()
        await dp.start_polling(bot, skip_updates=True)


    asyncio.run(main())