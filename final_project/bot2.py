import logging
import os
import torch
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from main import PoetTransformer, PoetDataset
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.environ.get("TOKEN")
CHECKPOINT_PATH = "checkpoints/checkpoint_epoch_4.pt"
JSON_PATH = "classic_poems.json"

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

model = None
vocab = None
authors = None
author_to_id = None
word2idx = None
idx2word = None


class UserState:
    def __init__(self):
        self.temperature = 1.0
        self.max_len = 30
        self.author_id = 0


user_states = {}


def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Å–ª–æ–≤–∞—Ä–µ–π"""
    global model, vocab, authors, author_to_id, word2idx, idx2word

    try:
        if not os.path.exists(CHECKPOINT_PATH):
            raise FileNotFoundError(f"Checkpoint file not found: {CHECKPOINT_PATH}")

        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        checkpoint = torch.load(CHECKPOINT_PATH, map_location=device)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        word2idx = checkpoint['word2idx']
        idx2word = checkpoint['idx2word']
        vocab_size = checkpoint['vocab_size']
        num_authors = checkpoint['num_authors']

        # –°–æ–∑–¥–∞–µ–º dataset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
        dataset = PoetDataset(JSON_PATH, max_length=32)
        authors = dataset.authors
        author_to_id = dataset.author_to_id

        # –ú–æ–¥–µ–ª—å
        model = PoetTransformer(
            vocab_size=vocab_size,
            num_authors=num_authors,
            d_model=256,
            nhead=8,
            num_layers=4
        ).to(device)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤
        model.load_state_dict(checkpoint['model_state'])
        model.eval()

        logger.info("–ú–æ–¥–µ–ª—å –∏ —Å–ª–æ–≤–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}", exc_info=True)
        return False


def generate_text(start_text, author_id=None, max_len=100, temperature=1.0):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: "
                    f"start_text='{start_text[:30]}...', "
                    f"author_id={author_id}, "
                    f"max_len={max_len}, "
                    f"temperature={temperature}")

        device = 'cuda' if torch.cuda.is_available() else 'cpu'
        logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {device}")

        # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        tokens = word_tokenize(start_text.lower())
        logger.debug(f"–¢–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {tokens}")

        input_ids = [word2idx.get(token, word2idx['<SOS>']) for token in tokens if token in word2idx]
        logger.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ input_ids: {input_ids}")

        if not input_ids:
            input_ids = [word2idx['<SOS>']]
            logger.debug("–ü—É—Å—Ç–æ–π input_ids, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω <SOS>")

        if len(input_ids) > 50:
            original_len = len(input_ids)
            input_ids = input_ids[-50:]
            logger.debug(f"–û–±—Ä–µ–∑–∞–Ω—ã input_ids —Å {original_len} –¥–æ 50 —Ç–æ–∫–µ–Ω–æ–≤")

        input_ids = torch.tensor([input_ids], dtype=torch.long, device=device)
        logger.debug(f"–¢–µ–Ω–∑–æ—Ä input_ids: {input_ids.shape}")

        if author_id is not None:
            author_tensor = torch.tensor([author_id], dtype=torch.long, device=device)
            logger.debug(f"–ê–≤—Ç–æ—Ä—Å–∫–∏–π —Ç–µ–Ω–∑–æ—Ä: {author_tensor}")
        else:
            author_tensor = None
            logger.debug("–ê–≤—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è None")

        output_ids = []
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (max_len={max_len})")

        for step in range(max_len):
            with torch.no_grad():
                seq_len = input_ids.size(1)
                mask = torch.triu(torch.ones(seq_len, seq_len) * float('-inf'), diagonal=1)
                mask = mask.to(device)

                if step % 10 == 0 or step == max_len - 1:
                    logger.debug(f"–®–∞–≥ {step}: seq_len={seq_len}, "
                                 f"input_ids shape={input_ids.shape}")

                logits = model(input_ids, author_tensor, mask=mask)[0, -1, :] / temperature

                if step % 10 == 0:
                    top5 = torch.topk(logits, 5)
                    top5_words = [(idx2word[idx.item()], prob.item())
                                  for idx, prob in zip(top5.indices, top5.values)]
                    logger.debug(f"–¢–æ–ø-5 –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ —à–∞–≥–µ {step}: {top5_words}")

                probs = torch.softmax(logits, dim=-1)
                next_word = torch.multinomial(probs, num_samples=1)
                output_ids.append(next_word.item())

                if next_word.item() == word2idx['<EOS>']:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω <EOS> –Ω–∞ —à–∞–≥–µ {step}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                    break

                next_word = next_word.unsqueeze(0)
                input_ids = torch.cat([input_ids, next_word], dim=1)

        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ output_ids: {output_ids}")

        words = []
        for idx in output_ids:
            if idx in idx2word:
                word = idx2word[idx]
                if word not in ['<SOS>', '<EOS>', '<PAD>']:
                    words.append(word)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        generated_text = ' '.join(words)
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞. –î–ª–∏–Ω–∞: {len(words)} —Å–ª–æ–≤. "
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{generated_text[:50]}...'")

        return generated_text.capitalize()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}", exc_info=True)
        logger.error(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏: "
                     f"start_text='{start_text[:30]}...', "
                     f"author_id={author_id}, "
                     f"max_len={max_len}, "
                     f"temperature={temperature}")
        raise RuntimeError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_states[user_id] = UserState()

    if model is None:
        await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        if not load_model():
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    state = user_states[user_id]

    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∏—Ö–æ–≤!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–º—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è, –∏ —è –Ω–∞–ø–∏—à—É –µ–≥–æ –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.\n\n"
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {state.temperature}\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {state.max_len} —Ç–æ–∫–µ–Ω–æ–≤\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Ä: {authors[state.author_id]}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(text)


@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞—á–∞–ª–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è, –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É –µ–≥–æ!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: \"–õ—É–Ω–∞ –Ω–∞–¥ —Ä–µ–∫–æ–π\""
    )
    await message.answer(help_text)


@dp.message(Command('settings'))
async def cmd_settings(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = UserState()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    state = user_states[user_id]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text=f"‚úèÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({state.temperature})",
            callback_data="set_temp"
        ),
        types.InlineKeyboardButton(
            text=f"üë®‚Äçüé® –ê–≤—Ç–æ—Ä",
            callback_data="set_author"
        ),
        types.InlineKeyboardButton(
            text=f"üìè –î–ª–∏–Ω–∞ ({state.max_len} —Å–∏–º–≤.)",
            callback_data="set_len"
        )
    )
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    settings_info = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        "1. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        "   ‚Ä¢ 0.1-0.5 - –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã\n"
        "   ‚Ä¢ 0.5-1.0 - –±–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏–∫–∏\n"
        "   ‚Ä¢ 1.0-2.0 - –±–æ–ª–µ–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        "2. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "3. –ê–≤—Ç–æ—Ä - —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—ç—Ç–∞"
    )

    await message.answer(
        text=settings_info,
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data == 'set_temp')
async def set_temperature(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="0.5 (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)",
            callback_data="temp_0.5"
        ),
        types.InlineKeyboardButton(
            text="1.0 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)",
            callback_data="temp_1.0"
        ),
        types.InlineKeyboardButton(
            text="1.5 (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ)",
            callback_data="temp_1.5"
        )
    )
    builder.adjust(2)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith('temp_'))
async def process_temperature(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    user_id = callback_query.from_user.id
    temp = float(callback_query.data.split('_')[1])
    user_states[user_id].temperature = temp

    await callback_query.message.edit_text(
        text=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {temp}"
    )


@dp.callback_query(lambda c: c.data == 'set_author')
async def set_author(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    for i, author in enumerate(authors):
        builder.add(types.InlineKeyboardButton(
            text=author,
            callback_data=f"author_{i}"
        ))
    builder.adjust(2)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith('author_'))
async def process_author(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞"""
    user_id = callback_query.from_user.id
    author_id = int(callback_query.data.split('_')[1])
    user_states[user_id].author_id = author_id

    await callback_query.message.edit_text(
        text=f"–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω"
    )


@dp.callback_query(lambda c: c.data == 'set_len')
async def set_length(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="10 —Å–∏–º–≤–æ–ª–æ–≤",
            callback_data="len_10"
        ),
        types.InlineKeyboardButton(
            text="30 —Å–∏–º–≤–æ–ª–æ–≤",
            callback_data="len_30"
        ),
        types.InlineKeyboardButton(
            text="50 —Å–∏–º–≤–æ–ª–æ–≤",
            callback_data="len_50"
        )
    )
    builder.adjust(2)

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith('len_'))
async def process_length(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã"""
    user_id = callback_query.from_user.id
    length = int(callback_query.data.split('_')[1])
    user_states[user_id].max_len = length

    await callback_query.message.edit_text(
        text=f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length}"
    )


@dp.message()
async def generate_poem(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = UserState()

    state = user_states[user_id]

    if model is None or word2idx is None or idx2word is None:
        await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        if not load_model():
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    try:
        msg = await message.answer("üñãÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ...")
        input_text = message.text.strip()

        if not input_text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.")
            return

        try:
            generated_text = generate_text(
                start_text=input_text,
                author_id=state.author_id,
                max_len=state.max_len,
                temperature=state.temperature
            )

            generated_text = generated_text.replace('<SOS>', '').replace('<EOS>', '').strip()
            if not generated_text:
                raise ValueError("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await msg.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Å –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–∑—ã.")
            return

        result = (
            f"üé≠ –ê–≤—Ç–æ—Ä: {authors[state.author_id]}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {state.temperature}\n"
            f"üìè –î–ª–∏–Ω–∞: {state.max_len} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"üìú –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{generated_text}\n\n"
            "‚úèÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ /settings"
        )

        await msg.edit_text(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        if not load_model():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        raise


if __name__ == '__main__':
    import asyncio
    from nltk.tokenize import word_tokenize
    from nltk import download

    download('punkt')


    async def main():
        await on_startup()
        await dp.start_polling(bot, skip_updates=True)


    asyncio.run(main())
